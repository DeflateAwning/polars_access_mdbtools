name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.11", "3.12", "3.13"]
        include:
          # Methodology: Use Ubuntu for basically everything, then target
          # specific cases for the OSes and Python versions.
          - os: macos-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.12"

          # Polars version tests (Python 3.12 only).
          - python-version: "3.12"
            polars-version: "0.20"
          - python-version: "3.12"
            polars-version: "1.20"
          - python-version: "3.12"
            polars-version: "1.30"
          - python-version: "3.12"
            polars-version: "1.31"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: |
          if [ -n "${{ matrix.polars-version || '' }}" ]; then
            echo "Overriding Polars version to ${{ matrix.polars-version }}"
            uv lock --upgrade-package polars==${{ matrix.polars-version }}
            uv sync --all-extras
          else
            uv sync --all-extras
          fi

      - name: Run linting
        run: |
          uv run ruff format --check .
          uv run ruff check .

      - name: Run type checking
        run: uv run pyright .

      # Linux (Ubuntu)
      - name: Install MDBTools on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mdbtools

      # macOS (Homebrew)
      - name: Install MDBTools on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install mdbtools

      # Windows (MSYS2 + build from source)
      - name: Install MDBTools on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install -y msys2
          C:\tools\msys64\usr\bin\bash -lc "
            pacman -Sy --noconfirm git base-devel mingw-w64-x86_64-toolchain automake autoconf libtool flex bison
            git clone https://github.com/mdbtools/mdbtools.git
            cd mdbtools
            autoreconf -i -f
            ./configure --host=x86_64-w64-mingw32 --disable-shared --enable-static
            make -j$(nproc)
            make install
          "

      - name: Run tests
        run: uv run pytest tests/

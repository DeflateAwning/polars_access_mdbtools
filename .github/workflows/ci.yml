name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.11", "3.12", "3.13"]
        include:
          # Methodology: Use Ubuntu for basically everything, then target
          # specific cases for the OSes and Python versions.
          - os: macos-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.12"

          # Polars version tests (Python 3.12 only).
          - python-version: "3.12"
            polars-version: "0.20"
          - python-version: "3.12"
            polars-version: "1.20"
          - python-version: "3.12"
            polars-version: "1.30"
          - python-version: "3.12"
            polars-version: "1.31"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Set up Python
        run: uv python install

      - name: Install uv dependencies
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          if [ -n "${{ matrix.polars-version || '' }}" ]; then
            echo "Overriding Polars version to ${{ matrix.polars-version }}"
            uv lock --upgrade-package polars==${{ matrix.polars-version }}
            uv sync --all-extras
          else
            uv sync --all-extras
          fi
      - name: Install uv dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          if ($env:MATRIX_POLARS_VERSION) {
            Write-Host "Overriding Polars version to $env:MATRIX_POLARS_VERSION"
            uv lock --upgrade-package polars==$env:MATRIX_POLARS_VERSION
            uv sync --all-extras
          } else {
            uv sync --all-extras
          }
        shell: pwsh

      - name: Run linting
        run: |
          uv run ruff format --check .
          uv run ruff check .

      - name: Run type checking
        run: uv run pyright .

      # Linux (Ubuntu)
      - name: Install MDBTools on Ubuntu
        if: runner.os == 'Linux'
        run: |
          # Remove mandb (to speed up apt installs).
          sudo apt-get remove -y mandb || true
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get update
          sudo apt-get install -y mdbtools

      # macOS (Homebrew)
      - name: Install MDBTools on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install mdbtools

      # Windows (download from build at https://github.com/lsgunth/mdbtools-win)
      - name: Install MDBTools on Windows
        if: runner.os == 'Windows'
        run: |
          $url = "https://github.com/lsgunth/mdbtools-win/archive/refs/tags/v1.0.0.zip"
          $zipPath = "$env:RUNNER_TEMP\mdbtools-win.zip"
          $extractPath = "$env:GITHUB_WORKSPACE\path"

          # Download the zip file
          Invoke-WebRequest -Uri $url -OutFile $zipPath

          # Create the target directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path $extractPath | Out-Null

          # Extract the zip file
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

          Write-Host "Extracted to $extractPath"
        shell: pwsh

      - name: Run tests
        run: uv run pytest tests/
